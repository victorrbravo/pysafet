/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.7
 */

#include "sipAPISafet.h"

#line 102 "Safet.sip"
#include "../websafet/src/SafetDocument.h"
#line 12 "./sipSafetSafetDocument.cpp"

#line 27 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 16 "./sipSafetSafetDocument.cpp"
#line 32 "/usr/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 19 "./sipSafetSafetDocument.cpp"
#line 27 "/usr/share/sip/PyQt4/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 22 "./sipSafetSafetDocument.cpp"
#line 63 "/usr/share/sip/PyQt4/QtCore/qchar.sip"
#include <qchar.h>
#line 25 "./sipSafetSafetDocument.cpp"
#line 26 "/usr/share/sip/PyQt4/QtSql/qsqlquery.sip"
#include <qsqlquery.h>
#line 28 "./sipSafetSafetDocument.cpp"
#line 336 "/usr/share/sip/PyQt4/QtXml/qdom.sip"
#include <qdom.h>
#line 31 "./sipSafetSafetDocument.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 34 "./sipSafetSafetDocument.cpp"
#line 368 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 37 "./sipSafetSafetDocument.cpp"
#line 351 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 40 "./sipSafetSafetDocument.cpp"
#line 29 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 43 "./sipSafetSafetDocument.cpp"
#line 265 "/usr/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 46 "./sipSafetSafetDocument.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 49 "./sipSafetSafetDocument.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 52 "./sipSafetSafetDocument.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 55 "./sipSafetSafetDocument.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 58 "./sipSafetSafetDocument.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 61 "./sipSafetSafetDocument.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 64 "./sipSafetSafetDocument.cpp"


class sipSafetDocument : public  ::SafetDocument
{
public:
    sipSafetDocument();
    virtual ~sipSafetDocument();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const char*);
    void sipProtectVirt_disconnectNotify(bool,const char*);
    int sipProtect_senderSignalIndex() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    void disconnectNotify(const char*);
    void connectNotify(const char*);
    void customEvent( ::QEvent*);
    void childEvent( ::QChildEvent*);
    void timerEvent( ::QTimerEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    bool event( ::QEvent*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipSafetDocument(const sipSafetDocument &);
    sipSafetDocument &operator = (const sipSafetDocument &);

    char sipPyMethods[7];
};

sipSafetDocument::sipSafetDocument():  ::SafetDocument(), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipSafetDocument::~sipSafetDocument()
{
    sipInstanceDestroyed(sipPySelf);
}

const QMetaObject *sipSafetDocument::metaObject() const
{
    return sip_Safet_qt_metaobject(sipPySelf,sipType_SafetDocument);
}

int sipSafetDocument::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::SafetDocument::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_Safet_qt_metacall(sipPySelf,sipType_SafetDocument,_c,_id,_a);

    return _id;
}

void *sipSafetDocument::qt_metacast(const char *_clname)
{
    return (sip_Safet_qt_metacast(sipPySelf, sipType_SafetDocument, _clname)) ? this :  ::SafetDocument::qt_metacast(_clname);
}

void sipSafetDocument::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::SafetDocument::disconnectNotify(a0);
        return;
    }

    extern void sipVH_Safet_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_Safet_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipSafetDocument::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::SafetDocument::connectNotify(a0);
        return;
    }

    extern void sipVH_Safet_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_Safet_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipSafetDocument::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::SafetDocument::customEvent(a0);
        return;
    }

    extern void sipVH_Safet_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_Safet_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipSafetDocument::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::SafetDocument::childEvent(a0);
        return;
    }

    extern void sipVH_Safet_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_Safet_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipSafetDocument::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::SafetDocument::timerEvent(a0);
        return;
    }

    extern void sipVH_Safet_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_Safet_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipSafetDocument::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::SafetDocument::eventFilter(a0,a1);

    extern bool sipVH_Safet_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_Safet_4(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

bool sipSafetDocument::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::SafetDocument::event(a0);

    extern bool sipVH_Safet_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_Safet_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QObject* sipSafetDocument::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipSafetDocument::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipSafetDocument::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipSafetDocument::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipSafetDocument::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipSafetDocument::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char*a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipSafetDocument::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char*a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipSafetDocument::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}


extern "C" {static PyObject *meth_SafetDocument_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipSafetDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_SafetDocument, &sipCpp))
        {
             ::QObject*sipRes = 0;

#line 678 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
        {
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
            Q_ASSERT(helper);
        }
        
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        sipRes = helper(sipRes);
#line 341 "./sipSafetSafetDocument.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipSafetDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 706 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helpers if it hasn't already been done.
        typedef const char *(*pyqt4_get_signal_t)(PyObject *);
        typedef int (*receivers_helper_func)(QObject *, const char *, int);
        
        static pyqt4_get_signal_t pyqt4_get_signal = 0;
        static receivers_helper_func receivers_helper = 0;
        
        if (!pyqt4_get_signal)
        {
            pyqt4_get_signal = (pyqt4_get_signal_t)sipImportSymbol("pyqt4_get_signal");
            Q_ASSERT(pyqt4_get_signal);
        }
        
        if (!receivers_helper)
        {
            receivers_helper = (receivers_helper_func)sipImportSymbol("qpycore_qobject_receivers");
            Q_ASSERT(receivers_helper);
        }
        
        // PyQt5: Get rid of the const casts.
        const char *sig = pyqt4_get_signal(a0);
            
        if (sig)
        {
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = receivers_helper(const_cast<QObject *>(sipCpp), sig, sipCpp->receivers(sig));
        #else
            sipRes = receivers_helper(const_cast<QObject *>(static_cast<const QObject *>(sipCpp)), sig, sipCpp->sipProtect_receivers(sig));
        #endif
        }
        else
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 404 "./sipSafetSafetDocument.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipSafetDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipSafetDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipSafetDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        PyObject * a0;
        sipSafetDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 752 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
        typedef const char *(*pyqt4_get_signal_t)(PyObject *);
        
        static pyqt4_get_signal_t pyqt4_get_signal = 0;
        
        if (!pyqt4_get_signal)
        {
            pyqt4_get_signal = (pyqt4_get_signal_t)sipImportSymbol("pyqt4_get_signal");
            Q_ASSERT(pyqt4_get_signal);
        }
        
        const char *sig = pyqt4_get_signal(a0);
            
        if (sig)
        {
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            (sipSelfWasArg ? sipCpp->QObject::connectNotify(sig) : sipCpp->connectNotify(sig));
        #else
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg, sig);
        #endif
        }
        else
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 548 "./sipSafetSafetDocument.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        PyObject * a0;
        sipSafetDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 785 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
        typedef const char *(*pyqt4_get_signal_t)(PyObject *);
        
        static pyqt4_get_signal_t pyqt4_get_signal = 0;
        
        if (!pyqt4_get_signal)
        {
            pyqt4_get_signal = (pyqt4_get_signal_t)sipImportSymbol("pyqt4_get_signal");
            Q_ASSERT(pyqt4_get_signal);
        }
        
        const char *sig = pyqt4_get_signal(a0);
            
        if (sig)
        {
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            (sipSelfWasArg ? sipCpp->QObject::disconnectNotify(sig) : sipCpp->disconnectNotify(sig));
        #else
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg, sig);
        #endif
        }
        else
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 609 "./sipSafetSafetDocument.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipSafetDocument *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_SafetDocument, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_senderSignalIndex();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_senderSignalIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getCertFileList(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getCertFileList(PyObject *, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString& a0def = ".pem";
        const  ::QString* a0 = &a0def;
        int a0State = 0;

        if (sipParseArgs(&sipParseErr, sipArgs, "|J1", sipType_QString,&a0, &a0State))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList( ::SafetDocument::getCertFileList(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getCertFileList, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_numberOfDataFileOnOpenXAdESContainer(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_numberOfDataFileOnOpenXAdESContainer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_SafetDocument, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->numberOfDataFileOnOpenXAdESContainer();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_numberOfDataFileOnOpenXAdESContainer, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_numberOfSignaturesOnOpenXAdESContainer(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_numberOfSignaturesOnOpenXAdESContainer(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_SafetDocument, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->numberOfSignaturesOnOpenXAdESContainer();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_numberOfSignaturesOnOpenXAdESContainer, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getDataFileName(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getDataFileName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getDataFileName(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getDataFileName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getDataFileLength(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getDataFileLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
            long sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getDataFileLength(a0);
            Py_END_ALLOW_THREADS

            return PyLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getDataFileLength, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getDataFileMimeType(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getDataFileMimeType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getDataFileMimeType(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getDataFileMimeType, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_numberOfDataFileAttributes(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_numberOfDataFileAttributes(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->numberOfDataFileAttributes(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_numberOfDataFileAttributes, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_connectToDataBase(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_connectToDataBase(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString* a0;
        int a0State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->connectToDataBase(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_connectToDataBase, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getDataBaseTableNames(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getDataBaseTableNames(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_SafetDocument, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->getDataBaseTableNames());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getDataBaseTableNames, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_createXMLFileFromSQL(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_createXMLFileFromSQL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString* a0;
        int a0State = 0;
         ::QString* a1;
        int a1State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->createXMLFileFromSQL(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a1,sipType_QString,a1State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_createXMLFileFromSQL, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getXmlQuery(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getXmlQuery(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QSqlQuery* a0;
        int a1;
        const  ::QString& a2def = "";
        const  ::QString* a2 = &a2def;
        int a2State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ9|J1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QSqlQuery, &a0, sipType_QString,&a2, &a2State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getXmlQuery(*a0,a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            PyObject *sipResObj = sipConvertFromNewType(sipRes,sipType_QString,NULL);
            return sipBuildResult(0,"(Ri)",sipResObj,a1);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getXmlQuery, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_addSignatureToExistingDigidocFile(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_addSignatureToExistingDigidocFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString* a0;
        int a0State = 0;
         ::QString* a1;
        int a1State = 0;
         ::QString* a2;
        int a2State = 0;
         ::QString* a3;
        int a3State = 0;
         ::QString* a4;
        int a4State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1J1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->addSignatureToExistingDigidocFile(*a0,*a1,*a2,*a3,*a4);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a1,sipType_QString,a1State);
            sipReleaseType(a2,sipType_QString,a2State);
            sipReleaseType(a3,sipType_QString,a3State);
            sipReleaseType(a4,sipType_QString,a4State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_addSignatureToExistingDigidocFile, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_signWithPrivateKeyOnFile(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_signWithPrivateKeyOnFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QString* a3;
        int a3State = 0;
        const  ::QString* a4;
        int a4State = 0;
        const  ::QString* a5;
        int a5State = 0;
        const  ::QString* a6;
        int a6State = 0;
        const  ::QString* a7;
        int a7State = 0;
        const  ::QString* a8;
        int a8State = 0;
        const  ::QString* a9;
        int a9State = 0;
        const  ::QString* a10;
        int a10State = 0;
        const  ::QString* a11;
        int a11State = 0;
        const  ::QString* a12;
        int a12State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1J1J1J1J1J1J1J1J1J1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QString,&a5, &a5State, sipType_QString,&a6, &a6State, sipType_QString,&a7, &a7State, sipType_QString,&a8, &a8State, sipType_QString,&a9, &a9State, sipType_QString,&a10, &a10State, sipType_QString,&a11, &a11State, sipType_QString,&a12, &a12State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->signWithPrivateKeyOnFile(*a0,*a1,*a2,*a3,*a4,*a5,*a6,*a7,*a8,*a9,*a10,*a11,*a12);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast< ::QString *>(a5),sipType_QString,a5State);
            sipReleaseType(const_cast< ::QString *>(a6),sipType_QString,a6State);
            sipReleaseType(const_cast< ::QString *>(a7),sipType_QString,a7State);
            sipReleaseType(const_cast< ::QString *>(a8),sipType_QString,a8State);
            sipReleaseType(const_cast< ::QString *>(a9),sipType_QString,a9State);
            sipReleaseType(const_cast< ::QString *>(a10),sipType_QString,a10State);
            sipReleaseType(const_cast< ::QString *>(a11),sipType_QString,a11State);
            sipReleaseType(const_cast< ::QString *>(a12),sipType_QString,a12State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_signWithPrivateKeyOnFile, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_initPKCS11Lib(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_initPKCS11Lib(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString* a0;
        int a0State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->initPKCS11Lib(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_initPKCS11Lib, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_initDigidocConfigStore(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_initDigidocConfigStore(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString* a0;
        int a0State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->initDigidocConfigStore(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_initDigidocConfigStore, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_verifySignMadeWithSmartCard(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_verifySignMadeWithSmartCard(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString* a0;
        int a0State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->verifySignMadeWithSmartCard(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
         ::QString* a0;
        int a0State = 0;
        int a1;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1i", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->verifySignMadeWithSmartCard(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QStringList* a1;
        int a1State = 0;
        bool a2;
         ::SafetDocument::SignatureOperator a3 = SafetDocument::AND;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1|E", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QStringList,&a1, &a1State, sipType_SafetDocument_SignatureOperator, &a3))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->verifySignMadeWithSmartCard(*a0,*a1,a2,a3);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QStringList *>(a1),sipType_QStringList,a1State);

            return sipBuildResult(0,"(bb)",sipRes,a2);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_verifySignMadeWithSmartCard, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_testSmartCardDriver(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_testSmartCardDriver(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->testSmartCardDriver(a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_testSmartCardDriver, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getCN(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getCN(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getCN(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getCN, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getSignerIndex(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getSignerIndex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString* a0;
        int a0State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getSignerIndex(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getSignerIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getCommonNameOfSigners(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getCommonNameOfSigners(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_SafetDocument, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->getCommonNameOfSigners());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getCommonNameOfSigners, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getNumberOfPrivateKeys(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getNumberOfPrivateKeys(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::QString* a1;
        int a1State = 0;
         ::QString* a2;
        int a2State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BiJ1J1", &sipSelf, sipType_SafetDocument, &sipCpp, &a0, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getNumberOfPrivateKeys(a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a1,sipType_QString,a1State);
            sipReleaseType(a2,sipType_QString,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getNumberOfPrivateKeys, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_writeFileToDisk(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_writeFileToDisk(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString* a0;
        int a0State = 0;
         ::QString* a1;
        int a1State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->writeFileToDisk(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a1,sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_writeFileToDisk, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_returnFileToString(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_returnFileToString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->returnFileToString(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_returnFileToString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_decryptDocument(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_decryptDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString* a0;
        int a0State = 0;
         ::QString* a1;
        int a1State = 0;
         ::QString* a2;
        int a2State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->decryptDocument(*a0,*a1,*a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a1,sipType_QString,a1State);
            sipReleaseType(a2,sipType_QString,a2State);

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_decryptDocument, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_decryptString(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_decryptString(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString* a0;
        int a0State = 0;
         ::QString* a1;
        int a1State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->decryptString(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);
            sipReleaseType(a1,sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_decryptString, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getTempNameFiles(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getTempNameFiles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bi", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->getTempNameFiles(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getTempNameFiles, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getCommonNameFromCertificate(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getCommonNameFromCertificate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString* a0;
        int a0State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getCommonNameFromCertificate(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getCommonNameFromCertificate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getAttribute(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getAttribute(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->getAttribute(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getAttribute, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getCountryOfSignature(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getCountryOfSignature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getCountryOfSignature(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getCountryOfSignature, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getStateOfSignature(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getStateOfSignature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getStateOfSignature(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getStateOfSignature, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getCityOfSignature(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getCityOfSignature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getCityOfSignature(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getCityOfSignature, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getPostalCodeOfSignature(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getPostalCodeOfSignature(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getPostalCodeOfSignature(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getPostalCodeOfSignature, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_signatureLocations(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_signatureLocations(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        const  ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->signatureLocations(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_signatureLocations, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_signatureLocation(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_signatureLocation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        const  ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->signatureLocation(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_signatureLocation, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getCountOfRoles(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getCountOfRoles(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->getCountOfRoles(a0);
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getCountOfRoles, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getRole(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getRole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
        int a1 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|ii", &sipSelf, sipType_SafetDocument, &sipCpp, &a0, &a1))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getRole(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getRole, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getSingingTime(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getSingingTime(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getSingingTime(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getSingingTime, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getSingingTimeOnlyDate(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getSingingTimeOnlyDate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getSingingTimeOnlyDate(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getSingingTimeOnlyDate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getSingingTimeOnlyHour(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getSingingTimeOnlyHour(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getSingingTimeOnlyHour(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getSingingTimeOnlyHour, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getSignatureType(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getSignatureType(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getSignatureType(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getSignatureType, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getSignatureFormat(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getSignatureFormat(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getSignatureFormat(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getSignatureFormat, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getSignerCertificateIssuerName(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getSignerCertificateIssuerName(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getSignerCertificateIssuerName(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getSignerCertificateIssuerName, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getSignerCertificateSerial(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getSignerCertificateSerial(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getSignerCertificateSerial(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getSignerCertificateSerial, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getValidAt(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getValidAt(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getValidAt(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getValidAt, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getValidUntil(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getValidUntil(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getValidUntil(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getValidUntil, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getPathOfSafetDocument(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getPathOfSafetDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_SafetDocument, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getPathOfSafetDocument());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getPathOfSafetDocument, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_setPathOfSafetDocument(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_setPathOfSafetDocument(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString* a0;
        int a0State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setPathOfSafetDocument(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_setPathOfSafetDocument, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_enhancedKeyUsage(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_enhancedKeyUsage(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->enhancedKeyUsage(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_enhancedKeyUsage, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_toUtf16(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_toUtf16(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->toUtf16(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_toUtf16, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_toUtf8(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_toUtf8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->toUtf8(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_toUtf8, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_decode(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_decode(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->decode(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_decode, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_subjectInfoUtf8(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_subjectInfoUtf8(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0;
        int a1;
        const  ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "Bii", &sipSelf, sipType_SafetDocument, &sipCpp, &a0, &a1))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->subjectInfoUtf8(a0,a1));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_subjectInfoUtf8, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_versionNumber(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_versionNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->versionNumber(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_versionNumber, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_serialNumber(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_serialNumber(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->serialNumber(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_serialNumber, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_toHex(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_toHex(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QByteArray* a0;
        int a0State = 0;
         ::QChar* a1;
        int a1State = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QByteArray, &a0, &a0State, sipType_QChar,&a1, &a1State))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->toHex(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QByteArray *>(a0),sipType_QByteArray,a0State);
            sipReleaseType(a1,sipType_QChar,a1State);

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_toHex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getSubjectDN(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getSubjectDN(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getSubjectDN(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getSubjectDN, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getIssuerDN(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getIssuerDN(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getIssuerDN(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getIssuerDN, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_policies(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_policies(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->policies(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_policies, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_authorityKeyIdentifier(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_authorityKeyIdentifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->authorityKeyIdentifier(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_authorityKeyIdentifier, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_subjectKeyIdentifier(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_subjectKeyIdentifier(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QByteArray*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QByteArray(sipCpp->subjectKeyIdentifier(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QByteArray,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_subjectKeyIdentifier, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getPublicKeyAlgorithm(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getPublicKeyAlgorithm(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getPublicKeyAlgorithm(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getPublicKeyAlgorithm, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_getPublicKeyLength(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_getPublicKeyLength(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        int a0 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B|i", &sipSelf, sipType_SafetDocument, &sipCpp, &a0))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getPublicKeyLength(a0));
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_getPublicKeyLength, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_SafetDocument_writeX509ToFile(PyObject *, PyObject *);}
static PyObject *meth_SafetDocument_writeX509ToFile(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::QString* a0;
        int a0State = 0;
        bool a1;
        int a2 = 0;
         ::SafetDocument *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1b|i", &sipSelf, sipType_SafetDocument, &sipCpp, sipType_QString,&a0, &a0State, &a1, &a2))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->writeX509ToFile(*a0,a1,a2);
            Py_END_ALLOW_THREADS
            sipReleaseType(a0,sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_SafetDocument, sipName_writeX509ToFile, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_SafetDocument(void *, const sipTypeDef *);}
static void *cast_SafetDocument(void *sipCppV, const sipTypeDef *targetType)
{
     ::SafetDocument *sipCpp = reinterpret_cast< ::SafetDocument *>(sipCppV);

    if (targetType == sipType_SafetXmlObject)
        return static_cast< ::SafetXmlObject *>(sipCpp);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_SafetDocument(void *, int);}
static void release_SafetDocument(void *sipCppV, int)
{
     ::SafetDocument *sipCpp = reinterpret_cast< ::SafetDocument *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_SafetDocument(sipSimpleWrapper *);}
static void dealloc_SafetDocument(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipSafetDocument *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_SafetDocument(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_SafetDocument(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_SafetDocument(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipSafetDocument *sipCpp = 0;

    {
        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, ""))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipSafetDocument();
            Py_END_ALLOW_THREADS

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_SafetDocument[] = {{9, 255, 1}};


static PyMethodDef methods_SafetDocument[] = {
    {SIP_MLNAME_CAST(sipName_addSignatureToExistingDigidocFile), meth_SafetDocument_addSignatureToExistingDigidocFile, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_authorityKeyIdentifier), meth_SafetDocument_authorityKeyIdentifier, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_SafetDocument_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_SafetDocument_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectToDataBase), meth_SafetDocument_connectToDataBase, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_createXMLFileFromSQL), meth_SafetDocument_createXMLFileFromSQL, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_SafetDocument_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_decode), meth_SafetDocument_decode, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_decryptDocument), meth_SafetDocument_decryptDocument, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_decryptString), meth_SafetDocument_decryptString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_SafetDocument_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_enhancedKeyUsage), meth_SafetDocument_enhancedKeyUsage, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getAttribute), meth_SafetDocument_getAttribute, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getCN), meth_SafetDocument_getCN, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getCertFileList), meth_SafetDocument_getCertFileList, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getCityOfSignature), meth_SafetDocument_getCityOfSignature, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getCommonNameFromCertificate), meth_SafetDocument_getCommonNameFromCertificate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getCommonNameOfSigners), meth_SafetDocument_getCommonNameOfSigners, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getCountOfRoles), meth_SafetDocument_getCountOfRoles, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getCountryOfSignature), meth_SafetDocument_getCountryOfSignature, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getDataBaseTableNames), meth_SafetDocument_getDataBaseTableNames, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getDataFileLength), meth_SafetDocument_getDataFileLength, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getDataFileMimeType), meth_SafetDocument_getDataFileMimeType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getDataFileName), meth_SafetDocument_getDataFileName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getIssuerDN), meth_SafetDocument_getIssuerDN, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getNumberOfPrivateKeys), meth_SafetDocument_getNumberOfPrivateKeys, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getPathOfSafetDocument), meth_SafetDocument_getPathOfSafetDocument, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getPostalCodeOfSignature), meth_SafetDocument_getPostalCodeOfSignature, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getPublicKeyAlgorithm), meth_SafetDocument_getPublicKeyAlgorithm, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getPublicKeyLength), meth_SafetDocument_getPublicKeyLength, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getRole), meth_SafetDocument_getRole, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getSignatureFormat), meth_SafetDocument_getSignatureFormat, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getSignatureType), meth_SafetDocument_getSignatureType, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getSignerCertificateIssuerName), meth_SafetDocument_getSignerCertificateIssuerName, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getSignerCertificateSerial), meth_SafetDocument_getSignerCertificateSerial, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getSignerIndex), meth_SafetDocument_getSignerIndex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getSingingTime), meth_SafetDocument_getSingingTime, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getSingingTimeOnlyDate), meth_SafetDocument_getSingingTimeOnlyDate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getSingingTimeOnlyHour), meth_SafetDocument_getSingingTimeOnlyHour, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getStateOfSignature), meth_SafetDocument_getStateOfSignature, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getSubjectDN), meth_SafetDocument_getSubjectDN, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getTempNameFiles), meth_SafetDocument_getTempNameFiles, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getValidAt), meth_SafetDocument_getValidAt, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getValidUntil), meth_SafetDocument_getValidUntil, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getXmlQuery), meth_SafetDocument_getXmlQuery, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_initDigidocConfigStore), meth_SafetDocument_initDigidocConfigStore, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_initPKCS11Lib), meth_SafetDocument_initPKCS11Lib, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_numberOfDataFileAttributes), meth_SafetDocument_numberOfDataFileAttributes, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_numberOfDataFileOnOpenXAdESContainer), meth_SafetDocument_numberOfDataFileOnOpenXAdESContainer, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_numberOfSignaturesOnOpenXAdESContainer), meth_SafetDocument_numberOfSignaturesOnOpenXAdESContainer, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_policies), meth_SafetDocument_policies, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_SafetDocument_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_returnFileToString), meth_SafetDocument_returnFileToString, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_SafetDocument_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_SafetDocument_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_serialNumber), meth_SafetDocument_serialNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setPathOfSafetDocument), meth_SafetDocument_setPathOfSafetDocument, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_signWithPrivateKeyOnFile), meth_SafetDocument_signWithPrivateKeyOnFile, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_signatureLocation), meth_SafetDocument_signatureLocation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_signatureLocations), meth_SafetDocument_signatureLocations, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_subjectInfoUtf8), meth_SafetDocument_subjectInfoUtf8, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_subjectKeyIdentifier), meth_SafetDocument_subjectKeyIdentifier, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_testSmartCardDriver), meth_SafetDocument_testSmartCardDriver, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_SafetDocument_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toHex), meth_SafetDocument_toHex, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toUtf16), meth_SafetDocument_toUtf16, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toUtf8), meth_SafetDocument_toUtf8, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_verifySignMadeWithSmartCard), meth_SafetDocument_verifySignMadeWithSmartCard, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_versionNumber), meth_SafetDocument_versionNumber, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeFileToDisk), meth_SafetDocument_writeFileToDisk, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_writeX509ToFile), meth_SafetDocument_writeX509ToFile, METH_VARARGS, NULL}
};

static sipEnumMemberDef enummembers_SafetDocument[] = {
    {sipName_ALL, static_cast<int>( ::SafetDocument::ALL), 5},
    {sipName_AND, static_cast<int>( ::SafetDocument::AND), 5},
    {sipName_OR, static_cast<int>( ::SafetDocument::OR), 5},
};


static pyqt4ClassPluginDef plugin_SafetDocument = {
    & ::SafetDocument::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_Safet_SafetDocument = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_SafetDocument,
        {0},
        &plugin_SafetDocument
    },
    {
        sipNameNr_SafetDocument,
        {0, 0, 1},
        71, methods_SafetDocument,
        3, enummembers_SafetDocument,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_SafetDocument,
    0,
    init_type_SafetDocument,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_SafetDocument,
    0,
    0,
    0,
    release_SafetDocument,
    cast_SafetDocument,
    0,
    0,
    0,
    0,
    0,
    0
};
