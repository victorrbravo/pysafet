/*
 * Interface wrapper code.
 *
 * Generated by SIP 4.19.7
 */

#include "sipAPISafet.h"

#line 13 "Safet.sip"
#include "../websafet/inflow/mainwindow.h"
#line 12 "./sipSafetMainWindow.cpp"

#line 27 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 16 "./sipSafetMainWindow.cpp"
#line 27 "/usr/share/sip/PyQt4/QtCore/qstringlist.sip"
#include <qstringlist.h>
#line 19 "./sipSafetMainWindow.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qmap.sip"
#include <qmap.h>
#line 22 "./sipSafetMainWindow.cpp"
#line 68 "/usr/share/sip/PyQt4/QtCore/qstring.sip"
#include <qstring.h>
#line 25 "./sipSafetMainWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 28 "./sipSafetMainWindow.cpp"
#line 368 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 31 "./sipSafetMainWindow.cpp"
#line 351 "/usr/share/sip/PyQt4/QtCore/qcoreevent.sip"
#include <qcoreevent.h>
#line 34 "./sipSafetMainWindow.cpp"
#line 29 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
#include <qobject.h>
#line 37 "./sipSafetMainWindow.cpp"
#line 265 "/usr/share/sip/PyQt4/QtCore/qvariant.sip"
#include <qvariant.h>
#line 40 "./sipSafetMainWindow.cpp"
#line 28 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 43 "./sipSafetMainWindow.cpp"
#line 32 "/usr/share/sip/PyQt4/QtCore/qbytearray.sip"
#include <qbytearray.h>
#line 46 "./sipSafetMainWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qnamespace.sip"
#include <qnamespace.h>
#line 49 "./sipSafetMainWindow.cpp"
#line 115 "/usr/share/sip/PyQt4/QtCore/qlist.sip"
#include <qlist.h>
#line 52 "./sipSafetMainWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qthread.sip"
#include <qthread.h>
#line 55 "./sipSafetMainWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qregexp.sip"
#include <qregexp.h>
#line 58 "./sipSafetMainWindow.cpp"
#line 26 "/usr/share/sip/PyQt4/QtCore/qobjectdefs.sip"
#include <qobjectdefs.h>
#line 61 "./sipSafetMainWindow.cpp"


class sipMainWindow : public  ::MainWindow
{
public:
    sipMainWindow(const  ::QString&);
    virtual ~sipMainWindow();

    int qt_metacall(QMetaObject::Call,int,void **);
    void *qt_metacast(const char *);
    const QMetaObject *metaObject() const;

    /*
     * There is a public method for every protected method visible from
     * this class.
     */
     ::QObject* sipProtect_sender() const;
    int sipProtect_receivers(const char*) const;
    void sipProtectVirt_timerEvent(bool, ::QTimerEvent*);
    void sipProtectVirt_childEvent(bool, ::QChildEvent*);
    void sipProtectVirt_customEvent(bool, ::QEvent*);
    void sipProtectVirt_connectNotify(bool,const char*);
    void sipProtectVirt_disconnectNotify(bool,const char*);
    int sipProtect_senderSignalIndex() const;

    /*
     * There is a protected method for every virtual method visible from
     * this class.
     */
protected:
    bool event( ::QEvent*);
    bool eventFilter( ::QObject*, ::QEvent*);
    void timerEvent( ::QTimerEvent*);
    void childEvent( ::QChildEvent*);
    void customEvent( ::QEvent*);
    void connectNotify(const char*);
    void disconnectNotify(const char*);

public:
    sipSimpleWrapper *sipPySelf;

private:
    sipMainWindow(const sipMainWindow &);
    sipMainWindow &operator = (const sipMainWindow &);

    char sipPyMethods[7];
};

sipMainWindow::sipMainWindow(const  ::QString& a0):  ::MainWindow(a0), sipPySelf(0)
{
    memset(sipPyMethods, 0, sizeof (sipPyMethods));
}

sipMainWindow::~sipMainWindow()
{
    sipInstanceDestroyed(sipPySelf);
}

const QMetaObject *sipMainWindow::metaObject() const
{
    return sip_Safet_qt_metaobject(sipPySelf,sipType_MainWindow);
}

int sipMainWindow::qt_metacall(QMetaObject::Call _c,int _id,void **_a)
{
    _id =  ::MainWindow::qt_metacall(_c,_id,_a);

    if (_id >= 0)
        _id = sip_Safet_qt_metacall(sipPySelf,sipType_MainWindow,_c,_id,_a);

    return _id;
}

void *sipMainWindow::qt_metacast(const char *_clname)
{
    return (sip_Safet_qt_metacast(sipPySelf, sipType_MainWindow, _clname)) ? this :  ::MainWindow::qt_metacast(_clname);
}

bool sipMainWindow::event( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[0],sipPySelf,NULL,sipName_event);

    if (!sipMeth)
        return  ::MainWindow::event(a0);

    extern bool sipVH_Safet_5(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    return sipVH_Safet_5(sipGILState, 0, sipPySelf, sipMeth, a0);
}

bool sipMainWindow::eventFilter( ::QObject*a0, ::QEvent*a1)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[1],sipPySelf,NULL,sipName_eventFilter);

    if (!sipMeth)
        return  ::MainWindow::eventFilter(a0,a1);

    extern bool sipVH_Safet_4(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QObject*, ::QEvent*);

    return sipVH_Safet_4(sipGILState, 0, sipPySelf, sipMeth, a0, a1);
}

void sipMainWindow::timerEvent( ::QTimerEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[2],sipPySelf,NULL,sipName_timerEvent);

    if (!sipMeth)
    {
         ::MainWindow::timerEvent(a0);
        return;
    }

    extern void sipVH_Safet_3(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QTimerEvent*);

    sipVH_Safet_3(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipMainWindow::childEvent( ::QChildEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[3],sipPySelf,NULL,sipName_childEvent);

    if (!sipMeth)
    {
         ::MainWindow::childEvent(a0);
        return;
    }

    extern void sipVH_Safet_2(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QChildEvent*);

    sipVH_Safet_2(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipMainWindow::customEvent( ::QEvent*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[4],sipPySelf,NULL,sipName_customEvent);

    if (!sipMeth)
    {
         ::MainWindow::customEvent(a0);
        return;
    }

    extern void sipVH_Safet_1(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *,  ::QEvent*);

    sipVH_Safet_1(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipMainWindow::connectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[5],sipPySelf,NULL,sipName_connectNotify);

    if (!sipMeth)
    {
         ::MainWindow::connectNotify(a0);
        return;
    }

    extern void sipVH_Safet_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_Safet_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

void sipMainWindow::disconnectNotify(const char*a0)
{
    sip_gilstate_t sipGILState;
    PyObject *sipMeth;

    sipMeth = sipIsPyMethod(&sipGILState,&sipPyMethods[6],sipPySelf,NULL,sipName_disconnectNotify);

    if (!sipMeth)
    {
         ::MainWindow::disconnectNotify(a0);
        return;
    }

    extern void sipVH_Safet_0(sip_gilstate_t, sipVirtErrorHandlerFunc, sipSimpleWrapper *, PyObject *, const char*);

    sipVH_Safet_0(sipGILState, 0, sipPySelf, sipMeth, a0);
}

 ::QObject* sipMainWindow::sipProtect_sender() const
{
    return  ::QObject::sender();
}

int sipMainWindow::sipProtect_receivers(const char*a0) const
{
    return  ::QObject::receivers(a0);
}

void sipMainWindow::sipProtectVirt_timerEvent(bool sipSelfWasArg, ::QTimerEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::timerEvent(a0) : timerEvent(a0));
}

void sipMainWindow::sipProtectVirt_childEvent(bool sipSelfWasArg, ::QChildEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::childEvent(a0) : childEvent(a0));
}

void sipMainWindow::sipProtectVirt_customEvent(bool sipSelfWasArg, ::QEvent*a0)
{
    (sipSelfWasArg ?  ::QObject::customEvent(a0) : customEvent(a0));
}

void sipMainWindow::sipProtectVirt_connectNotify(bool sipSelfWasArg,const char*a0)
{
    (sipSelfWasArg ?  ::QObject::connectNotify(a0) : connectNotify(a0));
}

void sipMainWindow::sipProtectVirt_disconnectNotify(bool sipSelfWasArg,const char*a0)
{
    (sipSelfWasArg ?  ::QObject::disconnectNotify(a0) : disconnectNotify(a0));
}

int sipMainWindow::sipProtect_senderSignalIndex() const
{
    return  ::QObject::senderSignalIndex();
}


extern "C" {static PyObject *meth_MainWindow_sender(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_MainWindow_sender(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipMainWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
             ::QObject*sipRes = 0;

#line 678 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
        typedef QObject *(*helper_func)(QObject *);
        
        static helper_func helper = 0;
        
        if (!helper)
        {
            helper = (helper_func)sipImportSymbol("qpycore_qobject_sender");
            Q_ASSERT(helper);
        }
        
        // sender() must be called without the GIL to avoid possible deadlocks between
        // the GIL and Qt's internal thread data mutex.
        
        Py_BEGIN_ALLOW_THREADS
        
        #if defined(SIP_PROTECTED_IS_PUBLIC)
        sipRes = sipCpp->sender();
        #else
        sipRes = sipCpp->sipProtect_sender();
        #endif
        
        Py_END_ALLOW_THREADS
        
        sipRes = helper(sipRes);
#line 338 "./sipSafetMainWindow.cpp"

            return sipConvertFromType(sipRes,sipType_QObject,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_sender, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_receivers(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_MainWindow_receivers(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        PyObject * a0;
        const sipMainWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_MainWindow, &sipCpp, &a0))
        {
            int sipRes = 0;
            sipErrorState sipError = sipErrorNone;

#line 706 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
        // We need to take into account any proxies for Python signals. Import the
        // helpers if it hasn't already been done.
        typedef const char *(*pyqt4_get_signal_t)(PyObject *);
        typedef int (*receivers_helper_func)(QObject *, const char *, int);
        
        static pyqt4_get_signal_t pyqt4_get_signal = 0;
        static receivers_helper_func receivers_helper = 0;
        
        if (!pyqt4_get_signal)
        {
            pyqt4_get_signal = (pyqt4_get_signal_t)sipImportSymbol("pyqt4_get_signal");
            Q_ASSERT(pyqt4_get_signal);
        }
        
        if (!receivers_helper)
        {
            receivers_helper = (receivers_helper_func)sipImportSymbol("qpycore_qobject_receivers");
            Q_ASSERT(receivers_helper);
        }
        
        // PyQt5: Get rid of the const casts.
        const char *sig = pyqt4_get_signal(a0);
            
        if (sig)
        {
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            sipRes = receivers_helper(const_cast<QObject *>(sipCpp), sig, sipCpp->receivers(sig));
        #else
            sipRes = receivers_helper(const_cast<QObject *>(static_cast<const QObject *>(sipCpp)), sig, sipCpp->sipProtect_receivers(sig));
        #endif
        }
        else
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 401 "./sipSafetMainWindow.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            return SIPLong_FromLong(sipRes);
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_receivers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_timerEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_MainWindow_timerEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QTimerEvent* a0;
        sipMainWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QTimerEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_timerEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_timerEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_childEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_MainWindow_childEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QChildEvent* a0;
        sipMainWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QChildEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_childEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_childEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_customEvent(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_MainWindow_customEvent(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
         ::QEvent* a0;
        sipMainWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BJ8", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QEvent, &a0))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->sipProtectVirt_customEvent(sipSelfWasArg,a0);
            Py_END_ALLOW_THREADS

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_customEvent, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_connectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_MainWindow_connectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        PyObject * a0;
        sipMainWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_MainWindow, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 752 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
        typedef const char *(*pyqt4_get_signal_t)(PyObject *);
        
        static pyqt4_get_signal_t pyqt4_get_signal = 0;
        
        if (!pyqt4_get_signal)
        {
            pyqt4_get_signal = (pyqt4_get_signal_t)sipImportSymbol("pyqt4_get_signal");
            Q_ASSERT(pyqt4_get_signal);
        }
        
        const char *sig = pyqt4_get_signal(a0);
            
        if (sig)
        {
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            (sipSelfWasArg ? sipCpp->QObject::connectNotify(sig) : sipCpp->connectNotify(sig));
        #else
            sipCpp->sipProtectVirt_connectNotify(sipSelfWasArg, sig);
        #endif
        }
        else
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 545 "./sipSafetMainWindow.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_connectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_disconnectNotify(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_MainWindow_disconnectNotify(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;
    bool sipSelfWasArg = (!sipSelf || sipIsDerivedClass((sipSimpleWrapper *)sipSelf));

    {
        PyObject * a0;
        sipMainWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "BP0", &sipSelf, sipType_MainWindow, &sipCpp, &a0))
        {
            sipErrorState sipError = sipErrorNone;

#line 785 "/usr/share/sip/PyQt4/QtCore/qobject.sip"
        typedef const char *(*pyqt4_get_signal_t)(PyObject *);
        
        static pyqt4_get_signal_t pyqt4_get_signal = 0;
        
        if (!pyqt4_get_signal)
        {
            pyqt4_get_signal = (pyqt4_get_signal_t)sipImportSymbol("pyqt4_get_signal");
            Q_ASSERT(pyqt4_get_signal);
        }
        
        const char *sig = pyqt4_get_signal(a0);
            
        if (sig)
        {
        #if defined(SIP_PROTECTED_IS_PUBLIC)
            (sipSelfWasArg ? sipCpp->QObject::disconnectNotify(sig) : sipCpp->disconnectNotify(sig));
        #else
            sipCpp->sipProtectVirt_disconnectNotify(sipSelfWasArg, sig);
        #endif
        }
        else
        {
            sipError = sipBadCallableArg(0, a0);
        }
#line 606 "./sipSafetMainWindow.cpp"

            if (sipError == sipErrorFail)
                return 0;

            if (sipError == sipErrorNone)
            {
            Py_INCREF(Py_None);
            return Py_None;
            }

            sipAddException(sipError, &sipParseErr);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_disconnectNotify, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_senderSignalIndex(PyObject *, PyObject *, PyObject *);}
static PyObject *meth_MainWindow_senderSignalIndex(PyObject *sipSelf, PyObject *sipArgs, PyObject *sipKwds)
{
    PyObject *sipParseErr = NULL;

    {
        const sipMainWindow *sipCpp;

        if (sipParseKwdArgs(&sipParseErr, sipArgs, sipKwds, NULL, NULL, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
            int sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sipProtect_senderSignalIndex();
            Py_END_ALLOW_THREADS

            return SIPLong_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_senderSignalIndex, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_autoComplete(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_autoComplete(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->autoComplete(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_autoComplete, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_login(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_login(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->login(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_login, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_logout(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_logout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->logout();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_logout, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_toInputForm(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_toInputForm(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1 = 1;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|b", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->toInputForm(*a0,a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_toInputForm, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_toInputConsole(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_toInputConsole(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        bool a1 = 1;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|b", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State, &a1))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toInputConsole(*a0,a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_toInputConsole, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_toInputUsers(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_toInputUsers(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->toInputUsers(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_toInputUsers, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_currentJSON(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_currentJSON(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->currentJSON());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_currentJSON, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_currentDATA(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_currentDATA(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->currentDATA());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_currentDATA, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_currentError(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_currentError(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->currentError());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_currentError, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_setMediaPath(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_setMediaPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setMediaPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_setMediaPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_mediaPath(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_mediaPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->mediaPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_mediaPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_inputPath(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_inputPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->inputPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_inputPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_setInputPath(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_setInputPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setInputPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_setInputPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_menuCommands(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_menuCommands(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->menuCommands());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_menuCommands, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_menuForm(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_menuForm(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->menuForm(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_menuForm, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_hostURL(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_hostURL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->hostURL());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_hostURL, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_setHostURL(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_setHostURL(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHostURL(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_setHostURL, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_setHostMediaPath(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_setHostMediaPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setHostMediaPath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_setHostMediaPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_hostMediaPath(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_hostMediaPath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->hostMediaPath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_hostMediaPath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_generateFormHead(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_generateFormHead(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->generateFormHead(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_generateFormHead, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_generateFormFooter(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_generateFormFooter(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->generateFormFooter(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_generateFormFooter, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_generateModifyHTML(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_generateModifyHTML(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QString* a3;
        int a3State = 0;
        const  ::QStringList* a4;
        int a4State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1J1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QStringList,&a4, &a4State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->generateModifyHTML(*a0,*a1,*a2,*a3,*a4));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QStringList *>(a4),sipType_QStringList,a4State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_generateModifyHTML, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_getFlowParameters(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_getFlowParameters(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->getFlowParameters(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_getFlowParameters, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_setConffileValues(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_setConffileValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMap< ::QString, ::QString>* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QMap_0100QString_0100QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setConffileValues(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QMap< ::QString, ::QString> *>(a0),sipType_QMap_0100QString_0100QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_setConffileValues, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_setParsValues(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_setParsValues(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const QMap< ::QString, ::QString>* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QMap_0100QString_0100QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setParsValues(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast<QMap< ::QString, ::QString> *>(a0),sipType_QMap_0100QString_0100QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_setParsValues, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_loadEditActions(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_loadEditActions(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
            QMap< ::QString, ::QString>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMap< ::QString, ::QString>(sipCpp->loadEditActions());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_loadEditActions, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_addInfoGraphDateText(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_addInfoGraphDateText(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->addInfoGraphDateText());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_addInfoGraphDateText, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_currentGraphTitle(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_currentGraphTitle(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->currentGraphTitle());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_currentGraphTitle, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_loadReportTemplate(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_loadReportTemplate(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString("");
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString("Listar_datos");
        const  ::QString* a2 = &a2def;
        int a2State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->loadReportTemplate(*a0,*a1,*a2));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_loadReportTemplate, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_setTemplatePath(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_setTemplatePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->setTemplatePath(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_setTemplatePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_templatePath(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_templatePath(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->templatePath());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_templatePath, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_registerLogin(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_registerLogin(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->registerLogin(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_registerLogin, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_doPermiseOperation(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_doPermiseOperation(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            QMap< ::QString, ::QString>*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new QMap< ::QString, ::QString>(sipCpp->doPermiseOperation(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QMap_0100QString_0100QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_doPermiseOperation, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_registerLogout(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_registerLogout(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->registerLogout(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_registerLogout, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_log(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_log(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->log(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_log, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_lastInfoGraph(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_lastInfoGraph(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->lastInfoGraph());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_lastInfoGraph, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_doSaveGraph(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_doSaveGraph(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QStringList* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QStringList,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->doSaveGraph(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QStringList *>(a0),sipType_QStringList,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_doSaveGraph, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_addNodeToXMLWorkflow(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_addNodeToXMLWorkflow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString& a1def = QString();
        const  ::QString* a1 = &a1def;
        int a1State = 0;
        const  ::QString& a2def = QString("newnode");
        const  ::QString* a2 = &a2def;
        int a2State = 0;
        bool a3 = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;
        const  ::QString& a5def = QString();
        const  ::QString* a5 = &a5def;
        int a5State = 0;
        const  ::QString& a6def = QString();
        const  ::QString* a6 = &a6def;
        int a6State = 0;
        const  ::QString& a7def = QString();
        const  ::QString* a7 = &a7def;
        int a7State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1|J1J1bJ1J1J1J1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, &a3, sipType_QString,&a4, &a4State, sipType_QString,&a5, &a5State, sipType_QString,&a6, &a6State, sipType_QString,&a7, &a7State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->addNodeToXMLWorkflow(*a0,*a1,*a2,a3,*a4,*a5,*a6,*a7));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast< ::QString *>(a5),sipType_QString,a5State);
            sipReleaseType(const_cast< ::QString *>(a6),sipType_QString,a6State);
            sipReleaseType(const_cast< ::QString *>(a7),sipType_QString,a7State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_addNodeToXMLWorkflow, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_delNodeToXMLWorkflow(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_delNodeToXMLWorkflow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->delNodeToXMLWorkflow(*a0,*a1));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_delNodeToXMLWorkflow, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_changeConnXMLWorkflow(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_changeConnXMLWorkflow(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QString* a3;
        int a3State = 0;
        const  ::QString& a4def = QString();
        const  ::QString* a4 = &a4def;
        int a4State = 0;
        const  ::QString& a5def = QString();
        const  ::QString* a5 = &a5def;
        int a5State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1|J1J1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QString,&a5, &a5State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->changeConnXMLWorkflow(*a0,*a1,*a2,*a3,*a4,*a5));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast< ::QString *>(a5),sipType_QString,a5State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_changeConnXMLWorkflow, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_createBdoc(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_createBdoc(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->createBdoc(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_createBdoc, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_checkUserRegister(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_checkUserRegister(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
        const  ::QString* a2;
        int a2State = 0;
        const  ::QString* a3;
        int a3State = 0;
        const  ::QString* a4;
        int a4State = 0;
        const  ::QString* a5;
        int a5State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1J1J1J1J1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State, sipType_QString,&a2, &a2State, sipType_QString,&a3, &a3State, sipType_QString,&a4, &a4State, sipType_QString,&a5, &a5State))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->checkUserRegister(*a0,*a1,*a2,*a3,*a4,*a5));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);
            sipReleaseType(const_cast< ::QString *>(a2),sipType_QString,a2State);
            sipReleaseType(const_cast< ::QString *>(a3),sipType_QString,a3State);
            sipReleaseType(const_cast< ::QString *>(a4),sipType_QString,a4State);
            sipReleaseType(const_cast< ::QString *>(a5),sipType_QString,a5State);

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_checkUserRegister, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_getInfoOfUser(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_getInfoOfUser(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
             ::QStringList*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QStringList(sipCpp->getInfoOfUser(*a0));
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            return sipConvertFromNewType(sipRes,sipType_QStringList,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_getInfoOfUser, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_sendCheckEmail(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_sendCheckEmail(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
        const  ::QString* a1;
        int a1State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1J1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State, sipType_QString,&a1, &a1State))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->sendCheckEmail(*a0,*a1);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);
            sipReleaseType(const_cast< ::QString *>(a1),sipType_QString,a1State);

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_sendCheckEmail, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_currentTable(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_currentTable(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->currentTable());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_currentTable, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_doLoadConfiguration(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_doLoadConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->doLoadConfiguration(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_doLoadConfiguration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_doSaveConfiguration(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_doSaveConfiguration(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
        const  ::QString* a0;
        int a0State = 0;
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "BJ1", &sipSelf, sipType_MainWindow, &sipCpp, sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp->doSaveConfiguration(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            Py_INCREF(Py_None);
            return Py_None;
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_doSaveConfiguration, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_postAction(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_postAction(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
             ::QString*sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = new  ::QString(sipCpp->postAction());
            Py_END_ALLOW_THREADS

            return sipConvertFromNewType(sipRes,sipType_QString,NULL);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_postAction, NULL);

    return NULL;
}


extern "C" {static PyObject *meth_MainWindow_checkAndExecEvents(PyObject *, PyObject *);}
static PyObject *meth_MainWindow_checkAndExecEvents(PyObject *sipSelf, PyObject *sipArgs)
{
    PyObject *sipParseErr = NULL;

    {
         ::MainWindow *sipCpp;

        if (sipParseArgs(&sipParseErr, sipArgs, "B", &sipSelf, sipType_MainWindow, &sipCpp))
        {
            bool sipRes;

            Py_BEGIN_ALLOW_THREADS
            sipRes = sipCpp->checkAndExecEvents();
            Py_END_ALLOW_THREADS

            return PyBool_FromLong(sipRes);
        }
    }

    /* Raise an exception if the arguments couldn't be parsed. */
    sipNoMethod(sipParseErr, sipName_MainWindow, sipName_checkAndExecEvents, NULL);

    return NULL;
}


/* Cast a pointer to a type somewhere in its inheritance hierarchy. */
extern "C" {static void *cast_MainWindow(void *, const sipTypeDef *);}
static void *cast_MainWindow(void *sipCppV, const sipTypeDef *targetType)
{
     ::MainWindow *sipCpp = reinterpret_cast< ::MainWindow *>(sipCppV);

    if (targetType == sipType_QObject)
        return static_cast< ::QObject *>(sipCpp);

    return sipCppV;
}


/* Call the instance's destructor. */
extern "C" {static void release_MainWindow(void *, int);}
static void release_MainWindow(void *sipCppV, int)
{
     ::MainWindow *sipCpp = reinterpret_cast< ::MainWindow *>(sipCppV);

    Py_BEGIN_ALLOW_THREADS

    if (QThread::currentThread() == sipCpp->thread())
        delete sipCpp;
    else
        sipCpp->deleteLater();

    Py_END_ALLOW_THREADS
}


extern "C" {static void dealloc_MainWindow(sipSimpleWrapper *);}
static void dealloc_MainWindow(sipSimpleWrapper *sipSelf)
{
    if (sipIsDerivedClass(sipSelf))
        reinterpret_cast<sipMainWindow *>(sipGetAddress(sipSelf))->sipPySelf = NULL;

    if (sipIsOwnedByPython(sipSelf))
    {
        release_MainWindow(sipGetAddress(sipSelf), sipIsDerivedClass(sipSelf));
    }
}


extern "C" {static void *init_type_MainWindow(sipSimpleWrapper *, PyObject *, PyObject *, PyObject **, PyObject **, PyObject **);}
static void *init_type_MainWindow(sipSimpleWrapper *sipSelf, PyObject *sipArgs, PyObject *sipKwds, PyObject **sipUnused, PyObject **, PyObject **sipParseErr)
{
    sipMainWindow *sipCpp = 0;

    {
        const  ::QString& a0def = QLatin1String("");
        const  ::QString* a0 = &a0def;
        int a0State = 0;

        if (sipParseKwdArgs(sipParseErr, sipArgs, sipKwds, NULL, sipUnused, "|J1", sipType_QString,&a0, &a0State))
        {
            Py_BEGIN_ALLOW_THREADS
            sipCpp = new sipMainWindow(*a0);
            Py_END_ALLOW_THREADS
            sipReleaseType(const_cast< ::QString *>(a0),sipType_QString,a0State);

            sipCpp->sipPySelf = sipSelf;

            return sipCpp;
        }
    }

    return NULL;
}


/* Define this type's super-types. */
static sipEncodedTypeDef supers_MainWindow[] = {{4, 0, 1}};


static PyMethodDef methods_MainWindow[] = {
    {SIP_MLNAME_CAST(sipName_addInfoGraphDateText), meth_MainWindow_addInfoGraphDateText, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_addNodeToXMLWorkflow), meth_MainWindow_addNodeToXMLWorkflow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_autoComplete), meth_MainWindow_autoComplete, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_changeConnXMLWorkflow), meth_MainWindow_changeConnXMLWorkflow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_checkAndExecEvents), meth_MainWindow_checkAndExecEvents, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_checkUserRegister), meth_MainWindow_checkUserRegister, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_childEvent), (PyCFunction)meth_MainWindow_childEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_connectNotify), (PyCFunction)meth_MainWindow_connectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_createBdoc), meth_MainWindow_createBdoc, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentDATA), meth_MainWindow_currentDATA, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentError), meth_MainWindow_currentError, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentGraphTitle), meth_MainWindow_currentGraphTitle, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentJSON), meth_MainWindow_currentJSON, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_currentTable), meth_MainWindow_currentTable, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_customEvent), (PyCFunction)meth_MainWindow_customEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_delNodeToXMLWorkflow), meth_MainWindow_delNodeToXMLWorkflow, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_disconnectNotify), (PyCFunction)meth_MainWindow_disconnectNotify, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_doLoadConfiguration), meth_MainWindow_doLoadConfiguration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_doPermiseOperation), meth_MainWindow_doPermiseOperation, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_doSaveConfiguration), meth_MainWindow_doSaveConfiguration, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_doSaveGraph), meth_MainWindow_doSaveGraph, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_generateFormFooter), meth_MainWindow_generateFormFooter, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_generateFormHead), meth_MainWindow_generateFormHead, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_generateModifyHTML), meth_MainWindow_generateModifyHTML, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getFlowParameters), meth_MainWindow_getFlowParameters, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_getInfoOfUser), meth_MainWindow_getInfoOfUser, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hostMediaPath), meth_MainWindow_hostMediaPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_hostURL), meth_MainWindow_hostURL, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_inputPath), meth_MainWindow_inputPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_lastInfoGraph), meth_MainWindow_lastInfoGraph, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_loadEditActions), meth_MainWindow_loadEditActions, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_loadReportTemplate), meth_MainWindow_loadReportTemplate, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_log), meth_MainWindow_log, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_login), meth_MainWindow_login, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_logout), meth_MainWindow_logout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_mediaPath), meth_MainWindow_mediaPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_menuCommands), meth_MainWindow_menuCommands, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_menuForm), meth_MainWindow_menuForm, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_postAction), meth_MainWindow_postAction, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_receivers), (PyCFunction)meth_MainWindow_receivers, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_registerLogin), meth_MainWindow_registerLogin, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_registerLogout), meth_MainWindow_registerLogout, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sendCheckEmail), meth_MainWindow_sendCheckEmail, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_sender), (PyCFunction)meth_MainWindow_sender, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_senderSignalIndex), (PyCFunction)meth_MainWindow_senderSignalIndex, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_setConffileValues), meth_MainWindow_setConffileValues, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHostMediaPath), meth_MainWindow_setHostMediaPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setHostURL), meth_MainWindow_setHostURL, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setInputPath), meth_MainWindow_setInputPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setMediaPath), meth_MainWindow_setMediaPath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setParsValues), meth_MainWindow_setParsValues, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_setTemplatePath), meth_MainWindow_setTemplatePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_templatePath), meth_MainWindow_templatePath, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_timerEvent), (PyCFunction)meth_MainWindow_timerEvent, METH_VARARGS|METH_KEYWORDS, NULL},
    {SIP_MLNAME_CAST(sipName_toInputConsole), meth_MainWindow_toInputConsole, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toInputForm), meth_MainWindow_toInputForm, METH_VARARGS, NULL},
    {SIP_MLNAME_CAST(sipName_toInputUsers), meth_MainWindow_toInputUsers, METH_VARARGS, NULL}
};


static pyqt4ClassPluginDef plugin_MainWindow = {
    & ::MainWindow::staticMetaObject,
    0,
    0
};


sipClassTypeDef sipTypeDef_Safet_MainWindow = {
    {
        -1,
        0,
        0,
        SIP_TYPE_SCC|SIP_TYPE_CLASS,
        sipNameNr_MainWindow,
        {0},
        &plugin_MainWindow
    },
    {
        sipNameNr_MainWindow,
        {0, 0, 1},
        57, methods_MainWindow,
        0, 0,
        0, 0,
        {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
    },
    0,
    -1,
    -1,
    supers_MainWindow,
    0,
    init_type_MainWindow,
    0,
    0,
#if PY_MAJOR_VERSION >= 3
    0,
    0,
#else
    0,
    0,
    0,
    0,
#endif
    dealloc_MainWindow,
    0,
    0,
    0,
    release_MainWindow,
    cast_MainWindow,
    0,
    0,
    0,
    0,
    0,
    0
};
